plugins {
    id "java"
    id 'idea'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id "com.google.protobuf" version "0.8.17"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group 'io.odpf'
version '0.0.1'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.1.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.1.0'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation 'io.grpc:grpc-all:1.50.2'

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

idea {
    module {
        testSourceDirs += file("$projectDir/src/generated/test/java")
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
        }
    }
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:3.1.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.0.3"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = false
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.path = "$projectDir/src/test/resources/__files/descriptors.bin"
        }
    }
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            pom {
                name = 'Raccoon'
                description = 'Library to pull latest client from a remote server'
                url = 'https://github.com/odpf/raccoon'

                scm {
                    url = 'https://github.com/odpf/raccoon.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'AkbaraliShaikh'
                        name = 'Akbar Shaikh'
                        email = 'aashaikh55@gmail.com'
                    }
                }
                from components.java
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}